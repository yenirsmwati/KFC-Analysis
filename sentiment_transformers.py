# -*- coding: utf-8 -*-
"""sentiment_transformers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CPyNEgQK72w6pvV6w1XINhPkbaXfxRaX
"""

import pandas as pd
import re

filepath1 = r"/content/review_kfc_jember.csv"
df_kfc= pd.read_csv(filepath1,encoding='ISO-8859-1')

filepath2 = r"/content/review_mcd_jember.csv"
df_mcd= pd.read_csv(filepath2,encoding='ISO-8859-1')

filepath3 = r"/content/review_burgerking_jember.csv"
df_burgerking= pd.read_csv(filepath3,encoding='ISO-8859-1')

df_kfc.head(2)

df_mcd.head(2)

df_burgerking.head(2)

data_kfc = df_kfc[["rating","snippet","fastfood", "date"]]
data_kfc.head()

data_mcd = df_mcd[["rating","snippet","fastfood", "date"]]
data_mcd.head()

data_burger = df_burgerking[["rating","snippet","fastfood", "date"]]
data_burger.head()

## Analisis Rating

avg_kfc = data_kfc["rating"].mean()
avg_mcd = data_mcd["rating"].mean()
avg_burger = data_burger["rating"].mean()

avg_rating_df = pd.DataFrame({
    'Nama Brand' : ['KFC', 'McDonald\'s', 'Burger King'],
    'Rata-Rata Rating' : [avg_kfc, avg_mcd, avg_burger]
})

print(avg_rating_df)

import matplotlib.pyplot as plt
import seaborn as sns

rating_count_kfc = data_kfc['rating'].value_counts().sort_index()
rating_count_mcd = data_mcd['rating'].value_counts().sort_index()
rating_count_burger = data_burger['rating'].value_counts().sort_index()

plt.figure(figsize=(10,6))
plt.bar(rating_count_kfc.index - 0.2, rating_count_kfc.values, width=0.2, label='KFC', color='orange')
plt.bar(rating_count_mcd.index, rating_count_mcd.values, width=0.2, label='McD', color='blue')
plt.bar(rating_count_burger.index + 0.2, rating_count_burger.values, width=0.2, label='Burger King', color='green')

plt.xlabel("Rating")
plt.ylabel("Jumlah Ulasan")
plt.title("Distribusi Rating Pelanggan")
plt.xticks([1, 2, 3, 4, 5])  # Pastikan sumbu x hanya menampilkan rating dari 1-5
plt.legend()
plt.show()

data_kfc['date'].unique()

data_mcd['date'].unique()

data_burger['date'].unique()

data_kfc['date'] = data_kfc['date'].replace({'setahun lalu': '1 tahun lalu','sebulan lalu':'1 bulan lalu', 'seminggu lalu': '1 minggu lalu'})
data_mcd['date'] = data_mcd['date'].replace({'setahun lalu': '1 tahun lalu', 'sebulan lalu':'1 bulan lalu','seminggu lalu': '1 minggu lalu'})
data_burger['date'] = data_burger['date'].replace({'setahun lalu': '1 tahun lalu', 'sebulan lalu':'1 bulan lalu','seminggu lalu': '1 minggu lalu'})

data_kfc['date'].unique()

data_mcd['date'].unique()

data_burger['date'].unique()

from datetime import datetime, timedelta

# Fungsi untuk mengonversi string seperti "1 bulan lalu" menjadi tanggal aktual
def convert_to_datetime(date_str):
    # Waktu saat ini
    now = datetime.now()

    # Pisahkan string menjadi jumlah dan satuan waktu
    parts = date_str.split()
    if len(parts) != 3:
        raise ValueError(f"Format tanggal tidak valid: {date_str}")

    jumlah = int(parts[0])  # Ambil angka (misalnya, 1, 2, 5)
    satuan = parts[1]       # Ambil satuan waktu (misalnya, "hari", "minggu", "bulan", "tahun")

    # Hitung tanggal berdasarkan satuan waktu
    if satuan == "hari":
        return now - timedelta(days=jumlah)
    elif satuan == "minggu":
        return now - timedelta(weeks=jumlah)
    elif satuan == "bulan":
        return now - timedelta(days=30 * jumlah)  # Asumsi 1 bulan = 30 hari
    elif satuan == "tahun":
        return now - timedelta(days=365 * jumlah)  # Asumsi 1 tahun = 365 hari
    else:
        raise ValueError(f"Satuan waktu tidak dikenali: {satuan}")

data_kfc = pd.DataFrame(data_kfc)
data_mcd = pd.DataFrame(data_mcd)
data_burger = pd.DataFrame(data_burger)

# Apply function to column 'date' dan simpan hasilnya di kolom yang sama
data_kfc['date_new'] = data_kfc['date'].apply(convert_to_datetime)
data_mcd['date_new'] = data_mcd['date'].apply(convert_to_datetime)
data_burger['date_new'] = data_burger['date'].apply(convert_to_datetime)

data_kfc.head()

data_mcd.head()

data_burger.head()

# Analisis waktu

# Menghitung selisih antara tanggal saat ini dan tanggal ulasan
data_kfc['date_diff'] = pd.to_datetime('today') - data_kfc['date_new']
data_kfc['days_ago'] = data_kfc['date_diff'].dt.days

data_kfc.head(2)

data_mcd['date_diff'] = pd.to_datetime('today') - data_mcd['date_new']
data_mcd['days_ago'] = data_mcd['date_diff'].dt.days

data_mcd.head(2)

data_burger['date_diff'] = pd.to_datetime('today') - data_burger['date_new']
data_burger['days_ago'] = data_burger['date_diff'].dt.days
data_burger.head(2)

# Mengelompokkan berdasarkan bulan dan menghitung jumlah ulasan per bulan
data_kfc['month'] = data_kfc['date_new'].dt.to_period('M')
reviews_per_month_kfc = data_kfc.groupby('month').size()

# Menampilkan jumlah ulasan per bulan
reviews_per_month_kfc.head(10)

# Mengelompokkan berdasarkan bulan dan menghitung jumlah ulasan per bulan
data_mcd['month'] = data_mcd['date_new'].dt.to_period('M')
reviews_per_month_mcd = data_mcd.groupby('month').size()

# Menampilkan jumlah ulasan per bulan
reviews_per_month_mcd.head()

# Mengelompokkan berdasarkan bulan dan menghitung jumlah ulasan per bulan
data_burger['month'] = data_burger['date_new'].dt.to_period('M')
reviews_per_month_burger = data_burger.groupby('month').size()

# Menampilkan jumlah ulasan per bulan
reviews_per_month_burger.head()

# Menghitung rata-rata rating per bulan
avg_rating_per_month_kfc = data_kfc.groupby('month')['rating'].mean()
avg_rating_per_month_mcd = data_mcd.groupby('month')['rating'].mean()
avg_rating_per_month_burger = data_burger.groupby('month')['rating'].mean()

# Menampilkan rata-rata rating per bulan
print(avg_rating_per_month_kfc.head())
print(avg_rating_per_month_mcd.head())
print(avg_rating_per_month_burger.head())

import matplotlib.pyplot as plt

# Plot jumlah ulasan per bulan
reviews_per_month_kfc.plot(kind='line', label='KFC')
reviews_per_month_mcd.plot(kind='line', label='McDonald\'s')
reviews_per_month_burger.plot(kind='line', label='Burger King')
plt.title('Jumlah Review per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Ulasan')
plt.legend()  # Menambahkan legend
plt.show()

# Plot rata-rata rating per bulan
avg_rating_per_month_kfc.plot(kind='line', label='KFC')
avg_rating_per_month_mcd.plot(kind='line', label='McDonald\'s')
avg_rating_per_month_burger.plot(kind='line', label='Burger King')
plt.title('Rata-rata Rating per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Rata-rata Rating')
plt.legend()  # Menambahkan legend
plt.show()

# Analisis Sentiment menggunakan Transformers

import pandas as pd
from transformers import pipeline

# Muat model dan tokenizer
pretrained_name = "ayameRushia/bert-base-indonesian-1.5G-sentiment-analysis-smsa"
nlp = pipeline("sentiment-analysis", model=pretrained_name, tokenizer=pretrained_name)

def get_sentiment(text):
    result = nlp(text)
    return result[0]['label']

data_kfc['sentiment'] = data_kfc['snippet'].apply(get_sentiment)
data_mcd['sentiment'] = data_mcd['snippet'].apply(get_sentiment)

data_kfc.head()

data_mcd.head()

def get_sentiment_long(text):
    chunks = [text[i:i+512] for i in range(0, len(text), 512)]
    results = [nlp(chunk)[0]['label'] for chunk in chunks]
    return max(set(results), key=results.count)

data_burger['sentiment'] = data_burger['snippet'].apply(get_sentiment_long)

data_burger.head()

sentiment_count_kfc = data_kfc['sentiment'].value_counts().sort_index()
sentiment_count_mcd = data_mcd['sentiment'].value_counts().sort_index()
sentiment_count_burger = data_burger['sentiment'].value_counts().sort_index()

sentiment_count_kfc

sentiment_count_mcd

sentiment_count_burger

import numpy as np
import matplotlib.pyplot as plt

# Pastikan kategori sama urutannya
categories = ['Negative', 'Neutral', 'Positive']
x = np.arange(len(categories))  # [0, 1, 2]

# Ambil nilai sesuai kategori (agar selaras dengan urutan 'categories')
values_kfc = [sentiment_count_kfc.get(cat, 0) for cat in categories]
values_mcd = [sentiment_count_mcd.get(cat, 0) for cat in categories]
values_burger = [sentiment_count_burger.get(cat, 0) for cat in categories]

plt.figure(figsize=(10,6))

# Buat bar chart dengan pergeseran posisi agar terlihat rapi
plt.bar(x - 0.2, values_kfc, width=0.2, label='KFC', color='orange')
plt.bar(x, values_mcd, width=0.2, label='McD', color='blue')
plt.bar(x + 0.2, values_burger, width=0.2, label='Burger King', color='green')

# Tambahkan label dan judul
plt.xlabel("Sentiment")
plt.ylabel("Jumlah Sentiment")
plt.title("Distribusi Sentimen Review Pelanggan")
plt.xticks(x, categories)  # Pastikan kategori sentimen sesuai di sumbu X
plt.legend()

# Tampilkan plot
plt.show()

